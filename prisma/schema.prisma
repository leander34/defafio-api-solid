// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password_hash   String
  whats_app_phone String
  role            Role     @default(MEMBER)
  address         Address?

  pets       Pet[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("orgs")
}

model Address {
  id         String    @id @default(uuid())
  org_id     String    @unique
  org        Org       @relation(fields: [org_id], references: [id], onDelete: Cascade)
  zipcode    String
  street     String
  number     String
  city       String
  state      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("addresses")
}

model Pet {
  id           String        @id @default(uuid())
  org_id       String
  org          Org           @relation(fields: [org_id], references: [id], onDelete: Cascade)
  name         String
  type         PetType
  gender       Gender
  about        String
  age          Int
  port         Int
  energy       Int
  independence Int
  ambience     Int
  photos       Photo[]
  requirements Requirement[]

  adopted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("pets")
}

model Photo {
  id         String    @id @default(uuid())
  pet_id     String
  pet        Pet       @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  name       String
  url        String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("photos")
}

model Requirement {
  id          String    @id @default(uuid())
  pet_id      String
  pet         Pet       @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  requirement String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("requirements")
}

enum Gender {
  male
  female
}

enum Role {
  ADMIN
  MEMBER
}

enum PetType {
  dog
  cat
}
